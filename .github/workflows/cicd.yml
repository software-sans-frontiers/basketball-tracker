name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  ANDROID_API_LEVEL: '36'
  ANDROID_BUILD_TOOLS: '36.0.0'

jobs:
  # Phase 1: Parallel Jobs for Testing and Building
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Android Lint
        run: ./gradlew lint
        
      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: app/build/reports/lint-results-*.html

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses || true

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew test
        env:
          GRADLE_OPTS: "-Xmx3g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/reports/tests/

  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses || true

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build debug APK
        run: ./gradlew assembleDebug
        env:
          GRADLE_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"

      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/*.apk
          retention-days: 7

  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses || true

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build release APK
        run: ./gradlew assembleRelease
        env:
          GRADLE_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"

      - name: Upload release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk
          retention-days: 30

  # Instrumentation tests (optional, runs on emulator)
  instrumentation-test:
    name: Instrumentation Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [29, 34]  # Test on multiple API levels
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedAndroidTest

  # Phase 2: Create Release (only after all tests pass on main branch)
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [lint, test, build-debug, build-release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version from commit
        id: version
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          SHORT_SHA=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=format:"%s" | tr -d '\n' | tr -d '\r')
          VERSION="v0.1.${COMMIT_COUNT}"
          TAG_NAME="${VERSION}-${SHORT_SHA}"
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION (commit: $SHORT_SHA)"

      - name: Download debug APK
        uses: actions/download-artifact@v4
        with:
          name: debug-apk
          path: ./apks/debug/

      - name: Download release APK
        uses: actions/download-artifact@v4
        with:
          name: release-apk
          path: ./apks/release/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag or use initial commit if no tags exist
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Generate changelog since last tag
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          name: "Basketball Tracker ${{ steps.version.outputs.VERSION }}"
          body: |
            ## 🏀 Basketball Tracker Release ${{ steps.version.outputs.VERSION }}
            
            **Latest commit:** ${{ steps.version.outputs.COMMIT_MSG }}
            
            ### 📊 Build Status
            - ✅ All tests passed
            - ✅ Lint checks passed
            - ✅ Debug APK built
            - ✅ Release APK built
            
            ### 📝 Changes in this release
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 📱 Installation
            1. Download the appropriate APK below:
               - **Debug APK**: For testing (includes debugging tools)
               - **Release APK**: For production use (optimized)
            2. Enable "Install from Unknown Sources" in Android settings
            3. Install the APK on your device
            
            ### 🎯 Current Features
            - Camera preview with CameraX
            - Shot detection (currently simulated)
            - Real-time statistics overlay
            - Make/miss tracking
            
            ### 🔧 Build Information
            - **Commit SHA:** `${{ github.sha }}`
            - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - **Min SDK:** 24 (Android 7.0)
            - **Target SDK:** 36 (Android 15)
            
            ---
            *This is an automated release from the CI/CD pipeline*
          draft: false
          prerelease: true  # Mark as pre-release until v1.0
          files: |
            ./apks/debug/*.apk
            ./apks/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Deploy to Play Store (future enhancement)
  # deploy-playstore:
  #   name: Deploy to Play Store
  #   runs-on: ubuntu-latest
  #   needs: [create-release]
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Deploy to Play Store
  #       # Add Play Store deployment steps here
  #       run: echo "Play Store deployment would go here"